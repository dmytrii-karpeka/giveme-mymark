const dotenv = require("dotenv");
dotenv.config();

import { Context, Markup, Telegraf } from 'telegraf';
import { Update } from 'typegram';

const Sheets = require("node-sheets").default;

const nameH: string = "–ù–∞–π–±–ª–∏–∂—á–∏–π —É—Ä–æ–∫";
const markH: string = "–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –ª–æ–≥—ñ–∫—ñ–≤";

async function getTable() {
    const gs = new Sheets(process.env.SHEET_ID)
    await gs.authorizeApiKey(process.env.GOOGLE_SHEET_KEY);
    const table = await gs.tables("–í–∏–∫–ª–∞–¥–∞—á!A:G");
    return table;
}

function getMarkByName(name: string, table: any) {
    const filteredRows = table.rows.filter((row: any) => {
        if (typeof row !== 'undefined') {
            if (typeof row[nameH] !== "undefined") {
                return typeof row[nameH].stringValue !== "undefined";
            } else {
                return false;
            }
        } else {
            return false;
        }
    })
    const row = filteredRows.find((student: any) => {
        if (student[nameH]) {
            return student[nameH].stringValue.toLowerCase() === name.toLowerCase();
        }
    });
    if (row) {
        return `–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ–≥—ñ–∫—ñ–≤ ${row[nameH].stringValue} –¥–æ—Ä—ñ–≤–Ω—é—î: ${row[markH].stringValue} üß©`;
    } else {
        return `–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∫–∞–∑–∞–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è. –Ø–∫—â–æ —ñ –Ω–∞–¥–∞–ª—ñ –±–∞—á–∏—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Ç–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞.`
    }
}


const bot: Telegraf<Context<Update>> = new Telegraf(process.env.BOT_TOKEN as string);

bot.start((ctx) => {
    ctx.reply(`–ü—Ä–∏–≤—ñ—Ç, ${ctx.from.first_name}!
–¶–µ–π –Ω–µ–≤–µ–ª–∏–∫–∏–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ —É —Ç–æ–º—É, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ —Å–≤–æ—é –æ—Ü—ñ–Ω–∫—É —ñ –Ω–µ —Ç—É—Ä–±—É–≤–∞—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞üë©‚Äçüè´

–î–ª—è —Ç–æ–≥–æ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –æ—Ü—ñ–Ω–∫—É –≤–≤–µ–¥–∏ —Å–≤–æ—î –ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è.
–ù–∞–ø—Ä–∏–∫–ª–∞–¥:

–î–º–∏—Ç—Ä–æ –ö–∞—Ä–ø–µ–Ω–∫–æ`);
});

bot.help((ctx) => {
    ctx.reply('–í—ñ–¥–ø—Ä–∞–≤ /start —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞ü§ñ');
    ctx.reply("–í—ñ–¥–ø—Ä–∞–≤ <–ü—Ä—ñ–∑–≤–∏—â–µ> <–Ü–º'—è> –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏üëæ");
    ctx.reply('–í—ñ–¥–ø—Ä–∞–≤ /quit –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞ üóë');
});

bot.on('text', async (ctx) => {
    await getTable().then(async (result: any) => {
        ctx.reply(
            getMarkByName(ctx.message.text, result) + "\n–î—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—å–æ–≥–æ –±–æ—Ç–∞! –ó–∏—á—É —É—Å–ø—ñ—Ö—ñ–≤ —É –Ω–∞–≤—á–∞–Ω–Ω—ñ ‚ú®"
        );
    });
});

bot.launch();
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));